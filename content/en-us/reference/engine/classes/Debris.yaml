name: Debris
type: class
category: Utility
memory_category: Instances
summary: |
  The Debris service the developer to schedule guaranteed destruction of the object without yielding, through the usage of the `Class.Debris:AddItem()`
  method.
description: |
  The Debris service allows the developer to schedule the removal of the object
  without yielding any code, through the usage of the `Class.Debris:AddItem()`
  method.

  After the lifetime argument has elapsed (in seconds) the object is removed in
  the same manner as `Class.Instance:Destroy()`.

  As Debris is a service it must be created using the
  `Class.ServiceProvider:GetService()` method.

  #### Why use Debris?

  Besides creating a bit of a mess, objects that are no longer required can use
  up system memory and cause the game to run slower over time. For this reason
  it is always advised to run the `Class.Instance:Destroy()` function on objects
  you no longer need. However in many cases an object may have a specific period
  of utility after which it needs to be destroyed.

  Take the example of a wall being smashed into individual bricks. If you want  a brick to linger for 3 seconds before being destroyed, you can use the following code:

  ```lua
  task.wait(3)
  brick:Destroy()
  ```

  However, waiting causes the thread to yield which may not be desired. To avoid yielding, a callback function can be scheduled to run on a new thread after 3 seconds:

  ```lua
  task.delay(3, function()
  	brick:Destroy()
  end)
  ```

  Or in one line:
  
  ```lua
  task.delay(3, brick.Destroy, brick)
  ```

  While this solves the above issue by preventing the code from yielding, there is a second drawback: The scheduled callback will never run if the script is disabled or destroyed before the callback runs.

  This is where Debris comes in. The following code addresses both of the
  above issues:

  ```lua
  Debris:AddItem(brick, 3)
  ```

  Debris does not yield the current thread and runs outside the context of the script, so it guarantees the instance is eventually destroyed even if the script is disabled or destroyed.

  Debris also has a hardcoded `Class.Debris.MaxItems` value of 1,000 objects, so if more than 1,000 debris is added, the oldest debris will be destroyed instantly to make room for the new debris. This means you should treat the lifetime parameter as a maximum lifetime, not an exact lifetime. Your debris could be destroyed before that time if 1,000 other debris are added after it.
code_samples:
  - Debris-AddItem
inherits:
  - Instance
tags:
  - NotCreatable
  - Service
deprecation_message: ''
properties:
  - name: Debris.MaxItems
    summary: |
      The maximum number of items that can be assigned to the
      `Class.Debris` service at one time.
    description: |
      The maximum number of items that can be assigned to the Debris service at
      one time.

      If this number is exceeded, objects are automatically removed in order
      from oldest to newest until the amount is less than or equal to MaxItems.

      This property is currently restricted and will error if set. The value is hardcoded to 1,000 items.
    code_samples:
    type: int
    tags:
      - Deprecated
    deprecation_message: |
      This property is deprecated and should not be used in new work.
    security:
      read: None
      write: None
    thread_safety: ReadSafe
    category: Data
    serialization:
      can_load: true
      can_save: true
methods:
  - name: Debris:AddItem
    summary: |
      Allows the developer to schedule the removal of the object without
      yielding any code.
    description: |
      Allows the developer to schedule guaranteed destruction of the object without yielding.

      Registers a given `Class.Instance` to the `Class.Debris` service for
      removal within the specified lifetime. The first argument is the object being removed, and the second argument is the amount of time in seconds the `Class.Debris` service will attempt to wait before destroying the object. The lifetime argument is optional and defaults to 10 seconds if not specified. The delay argument is a number, so it also accepts decimal points, such as '1.5', or '0.25'.

      If more than `Class.Debris.MaxItems` items are assigned to Debris, the oldest items will be destroyed instantly to make room for the new items. This means you should treat the lifetime parameter as a maximum lifetime, not an exact lifetime. Your debris could be cleaned up before that time if `Class.Debris.MaxItems` other debris are added after it.
    code_samples:
      - Debris-AddItem
    parameters:
      - name: item
        type: Instance
        default:
        summary: |
          The `Class.Instance` to be added to `Class.Debris`.
      - name: lifetime
        type: double
        default: 10
        summary: |
          The number of seconds before the `Class.Instance` should be destroyed.
    returns:
      - type: void
        summary: ''
    tags: []
    deprecation_message: ''
    security: None
    thread_safety: Unsafe
  - name: Debris:addItem
    summary: ''
    description: ''
    code_samples:
    parameters:
      - name: item
        type: Instance
        default:
        summary: ''
      - name: lifetime
        type: double
        default: 10
        summary: ''
    returns:
      - type: void
        summary: ''
    tags:
      - Deprecated
    deprecation_message: |
      This function is a deprecated variant of `Class.Debris:AddItem()` which
      should be used instead.
    security: None
    thread_safety: Unsafe
events: []
callbacks: []
